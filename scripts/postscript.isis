(set ps-program
  (if (bound? get-env)
      (switch (get-env "SYS")
        (else "/usr/bin/gs"))
      "/usr/bin/gs"))

(set ps-junkbuf (malloc 256))

# It is very important to use the stroke command after each
# path-oriented command (lineto, charpath, etc.), but also,
# the position must be preserved with currentpoint/moveto
# See how ps-lineto is implemented.
#  There are no "official" postscript references on the web
# (like by Adobe), but I found http://gamba.math.ubc.ca/localdoc/Flat/
# to have some useful tips. - 1/31/97 jjlilley

(set ps-init
  (proc args
    (local (pipe1 pipe2 writetogs readfromisis writetoisis
                  readfromgs pid resolution pagesize fontsize
                  fontname tempbuf imagebuf)
      (begin
        (set pipe1 (pipe))
        (set pipe2 (pipe))
        (set writetogs (pipe1 1))
        (set readfromisis (pipe1 0))
        (set writetoisis (pipe2 1))
        (set readfromgs (pipe2 0))
        (set pid Null)
        (set resolution 300)
        (set pagesize (if (= (length args) 1) (args 0) [256 256]))
        (set fontsize 30)
        (set fontname "Times-Roman")
        (set tempbuf (malloc (* (pagesize 0) (pagesize 1) 3)))
        (set imagebuf (new-image c-byte 3 pagesize [3 (* 3 (pagesize 0))]
                                 [ (+ tempbuf 0)
                                   (+ tempbuf 1) 
                                   (+ tempbuf 2) ]))
        (if (set pid (fork))
            (begin                   # parent fork
              (close readfromisis)
              (close writetoisis)
              (write-string writetogs     # this will block forever if gs didn't start properly
                            "<</DeferredMediaSelection true "
                            "/PageSize [" (uneval (pagesize 0))
                            " " (uneval (pagesize 1))
                            "] /ImagingBBox null>> setpagedevice\n"
                            "/Times-Roman findfont\n"
                            "30 scalefont\n"
                            "setfont\n"
                            "0 0 moveto\n"
                            "0.0 0.0 0.0 setrgbcolor\n"))	      
            (begin                   # child fork
              (close readfromgs)
              (close writetogs)
              (dup readfromisis 0)   # set standard input to pipe
              (dup writetoisis 1)    # set standard output to other pipe
              (exec ps-program 
                    "-sQUIET" 
                    "-sSAFE"
                    "-sDEVICE=ppmraw"
                    "-sOutputFile=-"
                    "-dNOPAUSE")
              (close 0)
              (close 1)
              (sleep 1000000) 
              (exit 1)))
        (proc args
          (switch (length args)
            (1 (switch (args 0)
                 ('f' (while (and (!= Null readfromgs) (pending readfromgs))  # flush
                        (begin
                          (if (= 0 (read-raw readfromgs 1 ps-junkbuf))
                              (begin (close readfromgs) (close writetogs)
                                     (print "Killing dead gs process" newline)
                                     (send-signal pid sig-kill)
                                     (set readfromgs Null) (set writetogs Null))))))
                 ('i' imagebuf)                    # return imagebuf
                 ("fontname" fontname)
                 ("fontsize" fontsize)
                 ("pagesize" pagesize)
                 ("resolution" resolution)
                 ("tempbuf" tempbuf)
                 ('q' (begin
			(write-string writetogs "quit" newline)
			(write-string writetogs "quit" newline)
                        (close readfromgs)
                        (close writetogs)
                        (free tempbuf)))))
            (2 (switch (args 0)
                 ('s' (begin
			#(print (args 1))
			(write-string writetogs (args 1))))
		 # write data
                 #		 ('s' (begin 
                 #			(print "*****************\n"
                 #			        (args 1)
                 #			       "\n*****************\n")
                 #			(write-string writetogs (args 1)))) # write data
                 ('i' (set imagebuf (args 1)))           # reset imagebuf
                 ('l' (while (!= (args 1)                # reads up to a char
                                 (begin (read-raw readfromgs 1 ps-junkbuf) 
					#(print (ps-junkbuf c-char))
                                        (ps-junkbuf c-char))) Null))
                 ("fontname" (set fontname (args 1)))
                 ("fontsize" (set fontsize (args 1)))
                 ("pagesize" (set pagesize (args 1)))
                 ("resolution" (set resolution (args 1)))
                 ("tempbuf" (set tempbuf (args 1)))))
            (3 (switch (args 0)          # read for render
                 ('r' (read-raw readfromgs (args 1) (args 2)))))))))))

(set ps-setpagesize
  (proc (engine sizelst)
    (local (newbuffer)
      (begin
        (set newbuffer (malloc (* (sizelst 0) (sizelst 1) 3)))
        (free (engine "tempbuf"))
        (engine "tempbuf" newbuffer)
        (engine 'i' (new-image c-byte 3 sizelst 
                               [3 (* 3 (sizelst 0))]
                               [ (+ newbuffer 0) 
                                 (+ newbuffer 1) 
                                 (+ newbuffer 2) ]))
        (engine "pagesize" sizelst)
        (engine 's' (append 
                     "<</DeferredMediaSelection true /PageSize [" 
                     (uneval (sizelst 0)) " " 
                     (uneval (sizelst 1))
                     "] /ImagingBBox null>> setpagedevice\n"
                     "0 0 moveto\n"))
        (engine 'f')
        engine))))

(set ps-setfont
  (proc (engine fontname)
    (begin
      (engine "fontname" fontname)
      (engine 's' (append 
                   "/" fontname 
                   " findfont\n" 
                   (uneval (engine "fontsize"))
                   " scalefont\nsetfont\n"))
      (engine 'f')
      engine)))

(set ps-showfont ps-setfont)

(set ps-scalefont
  (proc (engine fontsize)
    (begin
      (engine "fontsize" fontsize)
      (engine 's' (append 
                   "/" (engine "fontname") 
                   " findfont\n" 
                   (uneval fontsize)
                   " scalefont\nsetfont\n"))
      (engine 'f')
      engine)))  

(set ps-setrgbcolor
  (proc (engine colors)
    (if (list? colors)
        (begin
          (engine 's' (append 
                       (uneval (colors 0)) " " 
                       (uneval (colors 1)) " " 
                       (uneval (colors 2)) " setrgbcolor\n"))
          (engine 'f')
          engine)
        (print "************ Colors must be in a list\n"))))

(set ps-moveto
  (proc (engine coord)
    (begin
      (engine 's' (append 
                   (uneval (coord 0)) " " 
                   (uneval (coord 1)) " moveto\n"))
      (engine 'f')
      engine)))

(set ps-rotate
  (proc (engine theta)
    (begin
      (engine 's' (append (uneval theta) " rotate\n"))
      (engine 'f')
      engine)))

(set ps-setcliprect
  (proc (engine coords)
    (begin
      (engine 's'
              (append "newpath\n" (uneval (coord 0)) " " (uneval (coord 1)) 
                      " moveto\n " (uneval (coord 0)) " " (uneval (coord 3))
                      " lineto\n " (uneval (coord 2)) " " (uneval (coord 3))
                      " lineto\n " (uneval (coord 2)) " " (uneval (coord 1))
                      " lineto\nclosepath\nclip\n"))
      (engine 'f')
      engine)))

(set ps-translate
  (proc (engine coord)
    (begin
      (engine 's'
              (append (uneval (coord 0)) " " 
                      (uneval (coord 1)) " translate\n"))
      (engine 'f')
      engine)))

(set ps-showtext
  (proc (engine text)
    (local (parens)
      (begin
	(if (set parens (reverse (search-all '\\' text)))
	    (map (proc (i) (set text (insert-before i '\\' text))) parens))
	(if (set parens (reverse (search-all '(' text)))
	    (map (proc (i) (set text (insert-before i '\\' text))) parens))
	(if (set parens (reverse (search-all ')' text)))
	    (map (proc (i) (set text (insert-before i '\\' text))) parens))
	(engine 's' (append "(" text ") show\n"))
	(engine 'f')
	engine))))

(set ps-showoutline
  (proc (engine text)
    (begin                         # save spot, stroke, restore spot
      (engine 's' (append  "(" text ") true charpath\n"
                           "currentpoint\nstroke\nmoveto\n"))
      (engine 'f')  
      engine)))

(set ps-setlinewidth
  (proc (engine width)
    (begin
      (engine 's' (append (uneval width) " setlinewidth\n"))
      (engine 'f')
      engine)))

# This was originally just "x y lineto"... BUT
# this is better because otherwise if the linewidth/color is
# changed all lines will be changed
(set ps-lineto
  (proc (engine coord)
    (begin
      (engine 's'
              (append  "currentpoint\nnewpath\nmoveto\n"
                       (uneval (coord 0)) " " 
                       (uneval (coord 1)) " lineto\n"
                       "closepath\nstroke\n"
                       (uneval (coord 0)) " " 
                       (uneval (coord 1)) " moveto\n"))
      (engine 'f')
      engine)))

(set ps-curveto
  (proc (engine coord1 coord2 coord3)
    (begin
      (engine 's' 
              (append  "currentpoint\nnewpath\nmoveto\n"
                       (uneval (coord1 0)) " " 
                       (uneval (coord1 1)) " "
                       (uneval (coord2 0)) " " 
                       (uneval (coord2 1)) " "
                       (uneval (coord3 0)) " " 
                       (uneval (coord3 1)) " curveto\n"
                       "closepath\nstroke\n"
                       (uneval (coord3 0)) " " 
                       (uneval (coord3 1)) " moveto\n"))
      (engine 'f')
      engine)))

(set ps-arc
  (proc (engine coord radius degrees1 degrees2)
    (begin
      (engine 's'
              (append 
               "currentpoint\nnewpath\nmoveto\n"
               (uneval (coord 0)) " " 
               (uneval (coord 1)) " "
               (uneval radius) " " 
               (uneval degrees1) " "
               (uneval degrees2) " arc\n"
               "closepath\nstroke\n"
               (uneval (coord 0)) " " 
               (uneval (coord 1)) " moveto\n"))
      (engine 'f')
      engine)))

# ps-render sends the command and waits for the '#' character marking the 
# start of the image header.

(set ps-render 
  (proc (engine)
    (local (imgdims imgsize)      
      (begin
        (set imgdims (engine "pagesize"))
        (set imgsize (* (imgdims 0) (imgdims 1) 3))
        # The line below should NOT be normally used but can be used in
        # debugging to make sure all paths have been drawn.
        #	(engine 's' "stroke\n0 0 moveto\n")
        (engine 'f')
        (engine 's' "copypage\nerasepage\n")
        (engine 'l' '#')
        (engine 'l' '\n')
        (engine 'l' '\n')
        (engine 'l' '\n')
        (engine 'r' imgsize (engine "tempbuf"))
        (engine 'i')
        ))))

(set ps-close
  (proc (engine)
    (engine 'q')))

(set ps-easy-text
  (proc args
    (local (engine text size color font avewidth width height
                   bbox image)
      (begin
        (set engine (args 0))
        (set text (args 1))
        (set size (if (and (> (length args) 2) (!= Null (args 2)))
                      (args 2)
                      50.0))
        (set color (if (and (> (length args) 3) (!= Null (args 3)))
                       (args 3)
                       [0.0 0.0 0.0]))
        (set font (if (and (> (length args) 4) (!= Null (args 4)))
                      (args 4)
                      "Times"))
        (set avewidth (* 0.6 size))
        (set width (integer (* avewidth (length text))))
        (set height (integer (* 1.0 size)))
        (set bbox Null)
        (set image Null)
        (if engine
            (begin
              # the following line is needed for the bounding box to work
              (set color (if (= 1.0 (color 0)) (change-item 0 .99 color) color))
              (ps-setpagesize engine [width height])
              (ps-setfont engine font)
              (ps-scalefont engine size)
              (ps-moveto engine [2 (integer (* 0.27 size))])
              (ps-setrgbcolor engine color)
              (ps-showtext engine text)
              (set image (ps-render engine))
              (set bbox (image-bounding-box 0 254 (isolate-channel 0 image)))
              (set bbox (+ bbox [-2 -2 +2 +2]))
              (while (< (bbox 0) 0) (set bbox (+ bbox [1 0 0 0])))
              (while (< (bbox 1) 0) (set bbox (+ bbox [0 1 0 0])))
              (while (>= (bbox 2) ((image buf-dims) 0)) (set bbox (- bbox [0 0 1 0])))
              (while (>= (bbox 3) ((image buf-dims) 1)) (set bbox (- bbox [0 0 0 1])))
              (set image (if bbox
                             (image-copy 
                              (isolate-sub-image [(bbox 0) (bbox 1)]
                                                 [(- (bbox 2) (bbox 0) -1)
                                                  (- (bbox 3) (bbox 1) -1)]
                                                 image))))
              image))))))


(set ps-display-text
  (proc args
    (local (image win)
      (begin
        (set image (apply ps-easy-text args))
        (set win (xwin-create Null Null Null (image buf-dims)))
        (xwin-display-image win image)
        [win image]))))

(set ps-extract-alpha
  (proc (inbuf alphabuf)
    (if (or (!= (inbuf buf-dims) (alphabuf buf-dims)))
        (print "*** ps-create-alpha: buffer dims don't match" newline)
        (begin
          (image-gainbias -1.0 255.0 (isolate-channel 0 inbuf) alphabuf)
          (image-gainbias 255.0 0.0 alphabuf alphabuf)
          alphabuf))))

(set ps-create-alpha
  (proc (inbuf)
    (local (alphabuf)
      (begin
        (set alphabuf (new-standard-image 1 (inbuf buf-dims)))
        (ps-extract-alpha inbuf alphabuf)))))

(set ps-best-text
  (proc args
    (local (engine text finalheight font factor dobbox height
                   width filter filtcenter bbox xwin image bigsize
                   smallsize bigalpha filtalpha smallalpha finalimage
                   finalalpha)
      (begin
        (set engine (args 0))
        (set text (args 1))
        (set finalheight (args 2))
        (set font (if (and (> (length args) 3) (!= Null (args 3)))
                      (args 3)
                      "Times"))
        (set factor (clamp 1 10 
                           (if (and (> (length args) 4) (!= Null (args 4)))
                               (integer (args 4))
                               3)))
        (set dobbox (if (> (length args) 5) (args 5) True))
        (set height (integer (* finalheight factor)))
        (set width (integer (* (* 0.6 height) (length text))))
        (if engine
            (begin
              (ps-setpagesize engine [(+ width (* 2 factor)) 
                                      (+ height (* 2 factor))])
              (ps-setfont engine font)
              (ps-scalefont engine height)
              (ps-moveto engine [(* factor 4) (+ factor (integer (* 0.25 height)))])
              (ps-setrgbcolor engine [0.0 0.0 0.0])
              (ps-showtext engine text)
              (set image (ps-render engine))
              # (set xwin (xwin-create Null Null Null (image buf-dims)))
              # (xwin-display-image xwin image)
              (if dobbox
                  (begin
                    (set bbox (image-bounding-box 0 254 (isolate-channel 0 image)))
                    (set bbox (+ bbox (* (make-list 4 factor) [-1 -1 1 1])))
                    (if (< (bbox 0) 0) (set bbox (change-item 0 0 bbox)))
                    (if (< (bbox 1) 0) (set bbox (change-item 1 0 bbox)))
                    (if (>= (bbox 2) ((image buf-dims) 0))
                        (set bbox (change-item 2 (- ((image buf-dims) 0) 1) bbox)))
                    (if (>= (bbox 3) ((image buf-dims) 1))
                        (set bbox (change-item 3 (- ((image buf-dims) 1) 1) bbox)))
                    (set bigsize [(- (bbox 2) (bbox 0) -1) (- (bbox 3) (bbox 1) -1)])
                    (set bigalpha (if bbox
                                      (image-copy 
                                       (isolate-channel 
                                        0 (isolate-sub-image 
                                           [(bbox 0) (bbox 1)] bigsize image))))))
                  (begin
                    (set bigsize (image buf-dims))
                    (set bigalpha (image-copy (isolate-channel 0 image)))))
              (if (> factor 1)
                  (begin
                    (set filtalpha (new-standard-image 1 bigsize))
                    (set filter (make-list factor (/ 1.0 factor)))
                    (set filtcenter (/ factor 2))
                    (image-filter-1d filter filtcenter True bigalpha filtalpha)
                    (image-filter-1d filter filtcenter True 
                                     (transpose-image filtalpha)
                                     (transpose-image bigalpha))
                    (free-image filtalpha)))
              (set smallalpha (subsample-image factor bigalpha))
              (set smallsize (smallalpha buf-dims))
              (set finalalpha (image-copy smallalpha))
              (free-image bigalpha)
              (image-gainbias -1.0 255 finalalpha finalalpha)
              # (set xwin (xwin-create Null Null Null smallsize))
              # (xwin-display-image xwin finalalpha)
              finalalpha))))))


