# Snowflake
# Written just to practice Isis OpenGL & GLUT
#  by Andrew Hardwick, Lab 7 (Emerging Technologies Lab), BT.
#  2003/1/6-7
# Instructions:
#  Drag mouse horizontally in the window to change the number of levels of 
#   the fractal to display. Left = 1, right = 6.
#  Drag mouse vertically in the window to change the height to base ratio
#   of the triangular spikes on the edges. Bottom = -10, top = 10.
#  Drag window to change its size.
#  Press 'q' to exit program.
# Known deficiencies:
#  It does not use display list for speed optimization (recursive deleting
#   is hassle).
#  It does not check for overfilling the matrix stack.
#  It is my first ever OpenGL program & only 3rd ever Isis one so expect bugs!
# Routine BT Disclaimer:
#  This software was produced as a part of research activities. It is no
#  intended to be used as commercial or industrial software by any
#  organisation. Except where explicitly stated, no guarantees are given as
#  to its reliability or trustworthiness.

# Load libraries
(load "opengl-utilities.isis")

# Constants
(set OneThird (/ 1.0 3.0))

# Inital parameters
(set WindowWidth 500)
(set WindowHeight 500)
(set KinkHeight 1.0)
(set Levels 4)

# Callback function for drawing display
(set DisplayCallback
  (proc ()
    (begin
      # Clear the window
      (glClear GL_COLOR_BUFFER_BIT)
      # Draw a snowflake made of 3 kinked lines
      (map (proc (Angle)
	     (begin
	       (glPushMatrix)
	       (glRotatef Angle 0.0 0.0 1.0)
	       (glTranslatef 0.0 (/ 0.5 (cos (/ pi 6.0))) 0.0)
	       (glRotatef -60.0 0.0 0.0 1.0)
	       (FractalKinkedLine KinkHeight Levels)
	       (glPopMatrix)))
	   [0.0 -120.0 120.0])
      # Display the prepared image
      (glutSwapBuffers)
      # Shove all queued openGL comments
      (glFlush))))
   
# Function for drawing a fractal kinked line
#  It draws from (0 0 0) to (1 0 0).
#  Parameter 0 = relative kink height
#  Parameter 1 = number of sublevels of kinking
(set FractalKinkedLine
  (proc (KinkHeight Sublevels)
    (local (At2Kh Hyp)
      (begin
	# Precalculate some often used values  
	(set At2Kh (raddeg (atan (* 2.0 KinkHeight))))
	(set Hyp (sqrt (+ (* KinkHeight KinkHeight) 0.25)))
	# Call the recursive function which actually draws it
	(FractalKinkedLineRecurse KinkHeight Sublevels At2Kh Hyp)))))

# Function for drawing a fractal kinked line recursively
#  It draws from (0 0 0) to (1 0 0).
#  Parameter 0 = relative kink height
#  Parameter 1 = number of levels of kinking
#  Parameters 2 & 3 are cached values generated by FractalKinkedLine
(set FractalKinkedLineRecurse
  (proc (KinkHeight Sublevels At2Kh Hyp)
    (begin
      # Draw it
      (if (> Sublevels 1)
	 # Draw a kinked line
	 (begin
	   # Draw a kinked line made from 4 kinked lines
	   (glPushMatrix)
	   (glScalef OneThird OneThird OneThird)
	   (FractalKinkedLineRecurse KinkHeight (- Sublevels 1) At2Kh Hyp)
	   (glPushMatrix)
	   (glTranslatef 1.0 0.0 0.0)
	   (glRotatef At2Kh 0.0 0.0 1.0)
	   (glScalef Hyp Hyp Hyp)
	   (FractalKinkedLineRecurse KinkHeight (- Sublevels 1) At2Kh Hyp)
	   (glPopMatrix)
	   (glPushMatrix)
	   (glTranslatef 1.5 KinkHeight 0.0)
	   (glRotatef (- 0.0 At2Kh) 0.0 0.0 1.0)	
	   (glScalef Hyp Hyp Hyp)
	   (FractalKinkedLineRecurse KinkHeight (- Sublevels 1) At2Kh Hyp)
	   (glPopMatrix)
	   (glTranslatef 2.0 0.0 0.0)
	   (FractalKinkedLineRecurse KinkHeight (- Sublevels 1) At2Kh Hyp)
	   (glPopMatrix))
	 # At lowest level of recursion so just draw a straight line
	 (begin
	   (glBegin GL_LINES)
	   (glVertex3f 0.0 0.0 0.0)
	   (glVertex3f 1.0 0.0 0.0)
	   (glEnd))))))

# Callback function for window resizing
(set ReshapeCallback
  (proc (Width Height)
    (local (AspectRatio)
      (begin
	# Store the size for later use
	(set WindowWidth Width)
	(set WindowHeight Height)
	# Set visable area to whole window
	(glViewport 0 0 Width Height)
	# Reset projection matrix
	(glMatrixMode GL_PROJECTION)
	(glLoadIdentity)
	# Set axes scales to -1 to 1 in shortest dimension
	(set AspectRatio (/ (real Width) Height))
	(if (> AspectRatio 1)
	    (glOrtho (- 0.0 AspectRatio)
		     AspectRatio -1.0 1.0 -1.0 1.0)
	    (glOrtho -1.0 1.0
		     (- 0.0 (/ 1.0 AspectRatio))
		     (/ 1.0 AspectRatio)
		     -1.0 1.0))
	# Reset model & view matrix
	(glMatrixMode GL_MODELVIEW)
	(glLoadIdentity)))))

# Callback function for keypresses
(set KeyboardCallback
  (proc (KeyCode x y)
    # Quit program if 'q' is pressed
    (if (= (tolower (character KeyCode)) 'q')
	(exit))))

# Callback function for mouse dragging
(set MouseDragCallback
  (proc (x y)
    (begin
      # Restrict mouse position to within the window
      (set x (clamp 0 (- WindowWidth 1) x))
      (set y (clamp 0 (- WindowHeight 1) y))
      # Calculate new drawing parameters from the mouse position
      (set Levels (+ (floor (* (/ (real x) WindowWidth) 6)) 1))
      (set KinkHeight (* (- (/ (real y) WindowHeight) 0.5) 16))
      # Schedule screen for redrawing
      (glutPostRedisplay))))
  
# Create a GLUT window with double buffering
(glut-init "Snowflake")
(glut-create-window "Snowflake" [WindowWidth WindowHeight] [0 30] True)

# Set up GLUT call-back functions
(glutDisplayFunc glut_display)
(update-glut-callback-slot glut_display_slot DisplayCallback)
(glutReshapeFunc glut_reshape)
(update-glut-callback-slot glut_reshape_slot ReshapeCallback)
(glutKeyboardFunc glut_keyboard)
(update-glut-callback-slot glut_keyboard_slot KeyboardCallback)
(glutMotionFunc glut_motion)
(update-glut-callback-slot glut_motion_slot MouseDragCallback)

# Run GLUT event loop
(glutMainLoop)
